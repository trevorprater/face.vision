// Code generated by ModelQ
// img.go contains model for the database table [public.img]

package models

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type Img struct {
	Id         int64   `json:"id"`
	SourceUrl  string  `json:"source_url"`
	HostedUrl  string  `json:"hosted_url"`
	Tag        string  `json:"tag"`
	Content    string  `json:"content"`
	Extension  string  `json:"extension"`
	Width      int     `json:"width"`
	Height     int     `json:"height"`
	Lat        float64 `json:"lat"`
	Lng        float64 `json:"lng"`
	Attributes string  `json:"attributes"`
	Meta       string  `json:"meta"`
}

// Start of the Img APIs.

func (obj Img) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Img Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func (obj Img) Get(dbtx gmq.DbTx) (Img, error) {
	filter := ImgObjs.FilterId("=", obj.Id)
	if result, err := ImgObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Img) Insert(dbtx gmq.DbTx) (Img, error) {
	if result, err := ImgObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Img) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"SourceUrl", "HostedUrl", "Tag", "Content", "Extension", "Width", "Height", "Lat", "Lng", "Attributes", "Meta"}
	filter := ImgObjs.FilterId("=", obj.Id)
	if result, err := ImgObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Img) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := ImgObjs.FilterId("=", obj.Id)
	if result, err := ImgObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _ImgQuery struct {
	gmq.Query
}

func (q _ImgQuery) Where(f gmq.Filter) _ImgQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _ImgQuery) OrderBy(by ...string) _ImgQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := ImgObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _ImgQuery) GroupBy(by ...string) _ImgQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := ImgObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _ImgQuery) Limit(offsets ...int64) _ImgQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _ImgQuery) Page(number, size int) _ImgQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _ImgQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type ImgRowVisitor func(obj Img) bool

func (q _ImgQuery) Iterate(dbtx gmq.DbTx, functor ImgRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := ImgObjs.toImg(columns, rb)
		return functor(obj)
	})
}

func (q _ImgQuery) One(dbtx gmq.DbTx) (Img, error) {
	var obj Img
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = ImgObjs.toImg(columns, rb)
		return true
	})
	return obj, err
}

func (q _ImgQuery) List(dbtx gmq.DbTx) ([]Img, error) {
	result := make([]Img, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := ImgObjs.toImg(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _ImgObjs struct {
	fcMap map[string]string
}

func (o _ImgObjs) Names() (schema, tbl, alias string) {
	return "public", "img", "Img"
}

func (o _ImgObjs) Select(fields ...string) _ImgQuery {
	q := _ImgQuery{}
	if len(fields) == 0 {
		fields = []string{"Id", "SourceUrl", "HostedUrl", "Tag", "Content", "Extension", "Width", "Height", "Lat", "Lng", "Attributes", "Meta"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _ImgObjs) Insert(obj Img) _ImgQuery {
	q := _ImgQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "SourceUrl", "HostedUrl", "Tag", "Content", "Extension", "Width", "Height", "Lat", "Lng", "Attributes", "Meta"))
	return q
}

func (o _ImgObjs) Update(obj Img, fields ...string) _ImgQuery {
	q := _ImgQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _ImgObjs) Delete() _ImgQuery {
	q := _ImgQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _ImgObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}

func (o _ImgObjs) FilterSourceUrl(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("source_url", op, params...)
}

func (o _ImgObjs) FilterHostedUrl(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("hosted_url", op, params...)
}

func (o _ImgObjs) FilterTag(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("tag", op, params...)
}

func (o _ImgObjs) FilterContent(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("content", op, params...)
}

func (o _ImgObjs) FilterExtension(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("extension", op, params...)
}

func (o _ImgObjs) FilterWidth(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("width", op, params...)
}

func (o _ImgObjs) FilterHeight(op string, p int, ps ...int) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("height", op, params...)
}

func (o _ImgObjs) FilterLat(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("lat", op, params...)
}

func (o _ImgObjs) FilterLng(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("lng", op, params...)
}

func (o _ImgObjs) FilterAttributes(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("attributes", op, params...)
}

func (o _ImgObjs) FilterMeta(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("meta", op, params...)
}

///// Managed Objects Columns definition

func (o _ImgObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _ImgObjs) ColumnSourceUrl(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"source_url", value}
}

func (o _ImgObjs) ColumnHostedUrl(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"hosted_url", value}
}

func (o _ImgObjs) ColumnTag(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"tag", value}
}

func (o _ImgObjs) ColumnContent(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"content", value}
}

func (o _ImgObjs) ColumnExtension(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"extension", value}
}

func (o _ImgObjs) ColumnWidth(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"width", value}
}

func (o _ImgObjs) ColumnHeight(p ...int) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"height", value}
}

func (o _ImgObjs) ColumnLat(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"lat", value}
}

func (o _ImgObjs) ColumnLng(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"lng", value}
}

func (o _ImgObjs) ColumnAttributes(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"attributes", value}
}

func (o _ImgObjs) ColumnMeta(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"meta", value}
}

////// Internal helper funcs

func (o _ImgObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _ImgObjs) toImg(columns []gmq.Column, rb []sql.RawBytes) Img {
	obj := Img{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "source_url":
				obj.SourceUrl = gmq.AsString(rb[i])
			case "hosted_url":
				obj.HostedUrl = gmq.AsString(rb[i])
			case "tag":
				obj.Tag = gmq.AsString(rb[i])
			case "content":
				obj.Content = gmq.AsString(rb[i])
			case "extension":
				obj.Extension = gmq.AsString(rb[i])
			case "width":
				obj.Width = gmq.AsInt(rb[i])
			case "height":
				obj.Height = gmq.AsInt(rb[i])
			case "lat":
				obj.Lat = gmq.AsFloat64(rb[i])
			case "lng":
				obj.Lng = gmq.AsFloat64(rb[i])
			case "attributes":
				obj.Attributes = gmq.AsString(rb[i])
			case "meta":
				obj.Meta = gmq.AsString(rb[i])
			}
		}
	}
	return obj
}

func (o _ImgObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "SourceUrl":
			data = append(data, o.ColumnSourceUrl())
		case "HostedUrl":
			data = append(data, o.ColumnHostedUrl())
		case "Tag":
			data = append(data, o.ColumnTag())
		case "Content":
			data = append(data, o.ColumnContent())
		case "Extension":
			data = append(data, o.ColumnExtension())
		case "Width":
			data = append(data, o.ColumnWidth())
		case "Height":
			data = append(data, o.ColumnHeight())
		case "Lat":
			data = append(data, o.ColumnLat())
		case "Lng":
			data = append(data, o.ColumnLng())
		case "Attributes":
			data = append(data, o.ColumnAttributes())
		case "Meta":
			data = append(data, o.ColumnMeta())
		}
	}
	return data
}

func (o _ImgObjs) columnsWithData(obj Img, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "SourceUrl":
			data = append(data, o.ColumnSourceUrl(obj.SourceUrl))
		case "HostedUrl":
			data = append(data, o.ColumnHostedUrl(obj.HostedUrl))
		case "Tag":
			data = append(data, o.ColumnTag(obj.Tag))
		case "Content":
			data = append(data, o.ColumnContent(obj.Content))
		case "Extension":
			data = append(data, o.ColumnExtension(obj.Extension))
		case "Width":
			data = append(data, o.ColumnWidth(obj.Width))
		case "Height":
			data = append(data, o.ColumnHeight(obj.Height))
		case "Lat":
			data = append(data, o.ColumnLat(obj.Lat))
		case "Lng":
			data = append(data, o.ColumnLng(obj.Lng))
		case "Attributes":
			data = append(data, o.ColumnAttributes(obj.Attributes))
		case "Meta":
			data = append(data, o.ColumnMeta(obj.Meta))
		}
	}
	return data
}

var ImgObjs _ImgObjs

func init() {
	ImgObjs.fcMap = map[string]string{
		"Id":         "id",
		"SourceUrl":  "source_url",
		"HostedUrl":  "hosted_url",
		"Tag":        "tag",
		"Content":    "content",
		"Extension":  "extension",
		"Width":      "width",
		"Height":     "height",
		"Lat":        "lat",
		"Lng":        "lng",
		"Attributes": "attributes",
		"Meta":       "meta",
	}
	gob.Register(Img{})
}
