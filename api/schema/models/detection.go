// Code generated by ModelQ
// detection.go contains model for the database table [public.detection]

package models

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type Detection struct {
	Id               int64   `json:"id"`
	ImgId            int64   `json:"img_id"`
	FaceId           int64   `json:"face_id"`
	CenterX          float64 `json:"center_x"`
	CenterY          float64 `json:"center_y"`
	NoseX            float64 `json:"nose_x"`
	NoseY            float64 `json:"nose_y"`
	EyeLeftX         float64 `json:"eye_left_x"`
	EyeLeftY         float64 `json:"eye_left_y"`
	EyeRightX        float64 `json:"eye_right_x"`
	EyeRightY        float64 `json:"eye_right_y"`
	MouthLeftX       float64 `json:"mouth_left_x"`
	MouthLeftY       float64 `json:"mouth_left_y"`
	MouthRightX      float64 `json:"mouth_right_x"`
	MouthRightY      float64 `json:"mouth_right_y"`
	Attributes       string  `json:"attributes"`
	Gender           string  `json:"gender"`
	GenderConfidence float64 `json:"gender_confidence"`
	Age              float64 `json:"age"`
	Race             float64 `json:"race"`
	Smiling          float64 `json:"smiling"`
	Glass            float64 `json:"glass"`
	PosePitchAngle   float64 `json:"pose_pitch_angle"`
	PoseRollAngle    float64 `json:"pose_roll_angle"`
	PoseYawAngle     float64 `json:"pose_yaw_angle"`
}

// Start of the Detection APIs.

func (obj Detection) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Detection Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func (obj Detection) Get(dbtx gmq.DbTx) (Detection, error) {
	filter := DetectionObjs.FilterId("=", obj.Id)
	if result, err := DetectionObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Detection) Insert(dbtx gmq.DbTx) (Detection, error) {
	if result, err := DetectionObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Detection) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"ImgId", "FaceId", "CenterX", "CenterY", "NoseX", "NoseY", "EyeLeftX", "EyeLeftY", "EyeRightX", "EyeRightY", "MouthLeftX", "MouthLeftY", "MouthRightX", "MouthRightY", "Attributes", "Gender", "GenderConfidence", "Age", "Race", "Smiling", "Glass", "PosePitchAngle", "PoseRollAngle", "PoseYawAngle"}
	filter := DetectionObjs.FilterId("=", obj.Id)
	if result, err := DetectionObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Detection) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := DetectionObjs.FilterId("=", obj.Id)
	if result, err := DetectionObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _DetectionQuery struct {
	gmq.Query
}

func (q _DetectionQuery) Where(f gmq.Filter) _DetectionQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _DetectionQuery) OrderBy(by ...string) _DetectionQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := DetectionObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _DetectionQuery) GroupBy(by ...string) _DetectionQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := DetectionObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _DetectionQuery) Limit(offsets ...int64) _DetectionQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _DetectionQuery) Page(number, size int) _DetectionQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _DetectionQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type DetectionRowVisitor func(obj Detection) bool

func (q _DetectionQuery) Iterate(dbtx gmq.DbTx, functor DetectionRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := DetectionObjs.toDetection(columns, rb)
		return functor(obj)
	})
}

func (q _DetectionQuery) One(dbtx gmq.DbTx) (Detection, error) {
	var obj Detection
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = DetectionObjs.toDetection(columns, rb)
		return true
	})
	return obj, err
}

func (q _DetectionQuery) List(dbtx gmq.DbTx) ([]Detection, error) {
	result := make([]Detection, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := DetectionObjs.toDetection(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _DetectionObjs struct {
	fcMap map[string]string
}

func (o _DetectionObjs) Names() (schema, tbl, alias string) {
	return "public", "detection", "Detection"
}

func (o _DetectionObjs) Select(fields ...string) _DetectionQuery {
	q := _DetectionQuery{}
	if len(fields) == 0 {
		fields = []string{"Id", "ImgId", "FaceId", "CenterX", "CenterY", "NoseX", "NoseY", "EyeLeftX", "EyeLeftY", "EyeRightX", "EyeRightY", "MouthLeftX", "MouthLeftY", "MouthRightX", "MouthRightY", "Attributes", "Gender", "GenderConfidence", "Age", "Race", "Smiling", "Glass", "PosePitchAngle", "PoseRollAngle", "PoseYawAngle"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _DetectionObjs) Insert(obj Detection) _DetectionQuery {
	q := _DetectionQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "ImgId", "FaceId", "CenterX", "CenterY", "NoseX", "NoseY", "EyeLeftX", "EyeLeftY", "EyeRightX", "EyeRightY", "MouthLeftX", "MouthLeftY", "MouthRightX", "MouthRightY", "Attributes", "Gender", "GenderConfidence", "Age", "Race", "Smiling", "Glass", "PosePitchAngle", "PoseRollAngle", "PoseYawAngle"))
	return q
}

func (o _DetectionObjs) Update(obj Detection, fields ...string) _DetectionQuery {
	q := _DetectionQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _DetectionObjs) Delete() _DetectionQuery {
	q := _DetectionQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _DetectionObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}

func (o _DetectionObjs) FilterImgId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("img_id", op, params...)
}

func (o _DetectionObjs) FilterFaceId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("face_id", op, params...)
}

func (o _DetectionObjs) FilterCenterX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("center_x", op, params...)
}

func (o _DetectionObjs) FilterCenterY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("center_y", op, params...)
}

func (o _DetectionObjs) FilterNoseX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("nose_x", op, params...)
}

func (o _DetectionObjs) FilterNoseY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("nose_y", op, params...)
}

func (o _DetectionObjs) FilterEyeLeftX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("eye_left_x", op, params...)
}

func (o _DetectionObjs) FilterEyeLeftY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("eye_left_y", op, params...)
}

func (o _DetectionObjs) FilterEyeRightX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("eye_right_x", op, params...)
}

func (o _DetectionObjs) FilterEyeRightY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("eye_right_y", op, params...)
}

func (o _DetectionObjs) FilterMouthLeftX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("mouth_left_x", op, params...)
}

func (o _DetectionObjs) FilterMouthLeftY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("mouth_left_y", op, params...)
}

func (o _DetectionObjs) FilterMouthRightX(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("mouth_right_x", op, params...)
}

func (o _DetectionObjs) FilterMouthRightY(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("mouth_right_y", op, params...)
}

func (o _DetectionObjs) FilterAttributes(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("attributes", op, params...)
}

func (o _DetectionObjs) FilterGender(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("gender", op, params...)
}

func (o _DetectionObjs) FilterGenderConfidence(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("gender_confidence", op, params...)
}

func (o _DetectionObjs) FilterAge(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("age", op, params...)
}

func (o _DetectionObjs) FilterRace(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("race", op, params...)
}

func (o _DetectionObjs) FilterSmiling(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("smiling", op, params...)
}

func (o _DetectionObjs) FilterGlass(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("glass", op, params...)
}

func (o _DetectionObjs) FilterPosePitchAngle(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("pose_pitch_angle", op, params...)
}

func (o _DetectionObjs) FilterPoseRollAngle(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("pose_roll_angle", op, params...)
}

func (o _DetectionObjs) FilterPoseYawAngle(op string, p float64, ps ...float64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("pose_yaw_angle", op, params...)
}

///// Managed Objects Columns definition

func (o _DetectionObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _DetectionObjs) ColumnImgId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"img_id", value}
}

func (o _DetectionObjs) ColumnFaceId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"face_id", value}
}

func (o _DetectionObjs) ColumnCenterX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"center_x", value}
}

func (o _DetectionObjs) ColumnCenterY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"center_y", value}
}

func (o _DetectionObjs) ColumnNoseX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"nose_x", value}
}

func (o _DetectionObjs) ColumnNoseY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"nose_y", value}
}

func (o _DetectionObjs) ColumnEyeLeftX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"eye_left_x", value}
}

func (o _DetectionObjs) ColumnEyeLeftY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"eye_left_y", value}
}

func (o _DetectionObjs) ColumnEyeRightX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"eye_right_x", value}
}

func (o _DetectionObjs) ColumnEyeRightY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"eye_right_y", value}
}

func (o _DetectionObjs) ColumnMouthLeftX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"mouth_left_x", value}
}

func (o _DetectionObjs) ColumnMouthLeftY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"mouth_left_y", value}
}

func (o _DetectionObjs) ColumnMouthRightX(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"mouth_right_x", value}
}

func (o _DetectionObjs) ColumnMouthRightY(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"mouth_right_y", value}
}

func (o _DetectionObjs) ColumnAttributes(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"attributes", value}
}

func (o _DetectionObjs) ColumnGender(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"gender", value}
}

func (o _DetectionObjs) ColumnGenderConfidence(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"gender_confidence", value}
}

func (o _DetectionObjs) ColumnAge(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"age", value}
}

func (o _DetectionObjs) ColumnRace(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"race", value}
}

func (o _DetectionObjs) ColumnSmiling(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"smiling", value}
}

func (o _DetectionObjs) ColumnGlass(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"glass", value}
}

func (o _DetectionObjs) ColumnPosePitchAngle(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"pose_pitch_angle", value}
}

func (o _DetectionObjs) ColumnPoseRollAngle(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"pose_roll_angle", value}
}

func (o _DetectionObjs) ColumnPoseYawAngle(p ...float64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"pose_yaw_angle", value}
}

////// Internal helper funcs

func (o _DetectionObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _DetectionObjs) toDetection(columns []gmq.Column, rb []sql.RawBytes) Detection {
	obj := Detection{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "img_id":
				obj.ImgId = gmq.AsInt64(rb[i])
			case "face_id":
				obj.FaceId = gmq.AsInt64(rb[i])
			case "center_x":
				obj.CenterX = gmq.AsFloat64(rb[i])
			case "center_y":
				obj.CenterY = gmq.AsFloat64(rb[i])
			case "nose_x":
				obj.NoseX = gmq.AsFloat64(rb[i])
			case "nose_y":
				obj.NoseY = gmq.AsFloat64(rb[i])
			case "eye_left_x":
				obj.EyeLeftX = gmq.AsFloat64(rb[i])
			case "eye_left_y":
				obj.EyeLeftY = gmq.AsFloat64(rb[i])
			case "eye_right_x":
				obj.EyeRightX = gmq.AsFloat64(rb[i])
			case "eye_right_y":
				obj.EyeRightY = gmq.AsFloat64(rb[i])
			case "mouth_left_x":
				obj.MouthLeftX = gmq.AsFloat64(rb[i])
			case "mouth_left_y":
				obj.MouthLeftY = gmq.AsFloat64(rb[i])
			case "mouth_right_x":
				obj.MouthRightX = gmq.AsFloat64(rb[i])
			case "mouth_right_y":
				obj.MouthRightY = gmq.AsFloat64(rb[i])
			case "attributes":
				obj.Attributes = gmq.AsString(rb[i])
			case "gender":
				obj.Gender = gmq.AsString(rb[i])
			case "gender_confidence":
				obj.GenderConfidence = gmq.AsFloat64(rb[i])
			case "age":
				obj.Age = gmq.AsFloat64(rb[i])
			case "race":
				obj.Race = gmq.AsFloat64(rb[i])
			case "smiling":
				obj.Smiling = gmq.AsFloat64(rb[i])
			case "glass":
				obj.Glass = gmq.AsFloat64(rb[i])
			case "pose_pitch_angle":
				obj.PosePitchAngle = gmq.AsFloat64(rb[i])
			case "pose_roll_angle":
				obj.PoseRollAngle = gmq.AsFloat64(rb[i])
			case "pose_yaw_angle":
				obj.PoseYawAngle = gmq.AsFloat64(rb[i])
			}
		}
	}
	return obj
}

func (o _DetectionObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "ImgId":
			data = append(data, o.ColumnImgId())
		case "FaceId":
			data = append(data, o.ColumnFaceId())
		case "CenterX":
			data = append(data, o.ColumnCenterX())
		case "CenterY":
			data = append(data, o.ColumnCenterY())
		case "NoseX":
			data = append(data, o.ColumnNoseX())
		case "NoseY":
			data = append(data, o.ColumnNoseY())
		case "EyeLeftX":
			data = append(data, o.ColumnEyeLeftX())
		case "EyeLeftY":
			data = append(data, o.ColumnEyeLeftY())
		case "EyeRightX":
			data = append(data, o.ColumnEyeRightX())
		case "EyeRightY":
			data = append(data, o.ColumnEyeRightY())
		case "MouthLeftX":
			data = append(data, o.ColumnMouthLeftX())
		case "MouthLeftY":
			data = append(data, o.ColumnMouthLeftY())
		case "MouthRightX":
			data = append(data, o.ColumnMouthRightX())
		case "MouthRightY":
			data = append(data, o.ColumnMouthRightY())
		case "Attributes":
			data = append(data, o.ColumnAttributes())
		case "Gender":
			data = append(data, o.ColumnGender())
		case "GenderConfidence":
			data = append(data, o.ColumnGenderConfidence())
		case "Age":
			data = append(data, o.ColumnAge())
		case "Race":
			data = append(data, o.ColumnRace())
		case "Smiling":
			data = append(data, o.ColumnSmiling())
		case "Glass":
			data = append(data, o.ColumnGlass())
		case "PosePitchAngle":
			data = append(data, o.ColumnPosePitchAngle())
		case "PoseRollAngle":
			data = append(data, o.ColumnPoseRollAngle())
		case "PoseYawAngle":
			data = append(data, o.ColumnPoseYawAngle())
		}
	}
	return data
}

func (o _DetectionObjs) columnsWithData(obj Detection, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "ImgId":
			data = append(data, o.ColumnImgId(obj.ImgId))
		case "FaceId":
			data = append(data, o.ColumnFaceId(obj.FaceId))
		case "CenterX":
			data = append(data, o.ColumnCenterX(obj.CenterX))
		case "CenterY":
			data = append(data, o.ColumnCenterY(obj.CenterY))
		case "NoseX":
			data = append(data, o.ColumnNoseX(obj.NoseX))
		case "NoseY":
			data = append(data, o.ColumnNoseY(obj.NoseY))
		case "EyeLeftX":
			data = append(data, o.ColumnEyeLeftX(obj.EyeLeftX))
		case "EyeLeftY":
			data = append(data, o.ColumnEyeLeftY(obj.EyeLeftY))
		case "EyeRightX":
			data = append(data, o.ColumnEyeRightX(obj.EyeRightX))
		case "EyeRightY":
			data = append(data, o.ColumnEyeRightY(obj.EyeRightY))
		case "MouthLeftX":
			data = append(data, o.ColumnMouthLeftX(obj.MouthLeftX))
		case "MouthLeftY":
			data = append(data, o.ColumnMouthLeftY(obj.MouthLeftY))
		case "MouthRightX":
			data = append(data, o.ColumnMouthRightX(obj.MouthRightX))
		case "MouthRightY":
			data = append(data, o.ColumnMouthRightY(obj.MouthRightY))
		case "Attributes":
			data = append(data, o.ColumnAttributes(obj.Attributes))
		case "Gender":
			data = append(data, o.ColumnGender(obj.Gender))
		case "GenderConfidence":
			data = append(data, o.ColumnGenderConfidence(obj.GenderConfidence))
		case "Age":
			data = append(data, o.ColumnAge(obj.Age))
		case "Race":
			data = append(data, o.ColumnRace(obj.Race))
		case "Smiling":
			data = append(data, o.ColumnSmiling(obj.Smiling))
		case "Glass":
			data = append(data, o.ColumnGlass(obj.Glass))
		case "PosePitchAngle":
			data = append(data, o.ColumnPosePitchAngle(obj.PosePitchAngle))
		case "PoseRollAngle":
			data = append(data, o.ColumnPoseRollAngle(obj.PoseRollAngle))
		case "PoseYawAngle":
			data = append(data, o.ColumnPoseYawAngle(obj.PoseYawAngle))
		}
	}
	return data
}

var DetectionObjs _DetectionObjs

func init() {
	DetectionObjs.fcMap = map[string]string{
		"Id":               "id",
		"ImgId":            "img_id",
		"FaceId":           "face_id",
		"CenterX":          "center_x",
		"CenterY":          "center_y",
		"NoseX":            "nose_x",
		"NoseY":            "nose_y",
		"EyeLeftX":         "eye_left_x",
		"EyeLeftY":         "eye_left_y",
		"EyeRightX":        "eye_right_x",
		"EyeRightY":        "eye_right_y",
		"MouthLeftX":       "mouth_left_x",
		"MouthLeftY":       "mouth_left_y",
		"MouthRightX":      "mouth_right_x",
		"MouthRightY":      "mouth_right_y",
		"Attributes":       "attributes",
		"Gender":           "gender",
		"GenderConfidence": "gender_confidence",
		"Age":              "age",
		"Race":             "race",
		"Smiling":          "smiling",
		"Glass":            "glass",
		"PosePitchAngle":   "pose_pitch_angle",
		"PoseRollAngle":    "pose_roll_angle",
		"PoseYawAngle":     "pose_yaw_angle",
	}
	gob.Register(Detection{})
}
