// Code generated by ModelQ
// grouping.go contains model for the database table [public.grouping]

package models

import (
	"database/sql"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"github.com/mijia/modelq/gmq"
	"strings"
)

type Grouping struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// Start of the Grouping APIs.

func (obj Grouping) String() string {
	if data, err := json.Marshal(obj); err != nil {
		return fmt.Sprintf("<Grouping Id=%v>", obj.Id)
	} else {
		return string(data)
	}
}

func (obj Grouping) Get(dbtx gmq.DbTx) (Grouping, error) {
	filter := GroupingObjs.FilterId("=", obj.Id)
	if result, err := GroupingObjs.Select().Where(filter).One(dbtx); err != nil {
		return obj, err
	} else {
		return result, nil
	}
}

func (obj Grouping) Insert(dbtx gmq.DbTx) (Grouping, error) {
	if result, err := GroupingObjs.Insert(obj).Run(dbtx); err != nil {
		return obj, err
	} else {
		if dbtx.DriverName() != "postgres" {
			if id, err := result.LastInsertId(); err != nil {
				return obj, err
			} else {
				obj.Id = id
				return obj, err
			}
		}
		return obj, nil
	}
}

func (obj Grouping) Update(dbtx gmq.DbTx) (int64, error) {
	fields := []string{"Name"}
	filter := GroupingObjs.FilterId("=", obj.Id)
	if result, err := GroupingObjs.Update(obj, fields...).Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

func (obj Grouping) Delete(dbtx gmq.DbTx) (int64, error) {
	filter := GroupingObjs.FilterId("=", obj.Id)
	if result, err := GroupingObjs.Delete().Where(filter).Run(dbtx); err != nil {
		return 0, err
	} else {
		return result.RowsAffected()
	}
}

// Start of the inner Query Api

type _GroupingQuery struct {
	gmq.Query
}

func (q _GroupingQuery) Where(f gmq.Filter) _GroupingQuery {
	q.Query = q.Query.Where(f)
	return q
}

func (q _GroupingQuery) OrderBy(by ...string) _GroupingQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		sortDir := ""
		if b[0] == '-' || b[0] == '+' {
			sortDir = string(b[0])
			b = b[1:]
		}
		if col, ok := GroupingObjs.fcMap[b]; ok {
			tBy = append(tBy, sortDir+col)
		}
	}
	q.Query = q.Query.OrderBy(tBy...)
	return q
}

func (q _GroupingQuery) GroupBy(by ...string) _GroupingQuery {
	tBy := make([]string, 0, len(by))
	for _, b := range by {
		if col, ok := GroupingObjs.fcMap[b]; ok {
			tBy = append(tBy, col)
		}
	}
	q.Query = q.Query.GroupBy(tBy...)
	return q
}

func (q _GroupingQuery) Limit(offsets ...int64) _GroupingQuery {
	q.Query = q.Query.Limit(offsets...)
	return q
}

func (q _GroupingQuery) Page(number, size int) _GroupingQuery {
	q.Query = q.Query.Page(number, size)
	return q
}

func (q _GroupingQuery) Run(dbtx gmq.DbTx) (sql.Result, error) {
	return q.Query.Exec(dbtx)
}

type GroupingRowVisitor func(obj Grouping) bool

func (q _GroupingQuery) Iterate(dbtx gmq.DbTx, functor GroupingRowVisitor) error {
	return q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := GroupingObjs.toGrouping(columns, rb)
		return functor(obj)
	})
}

func (q _GroupingQuery) One(dbtx gmq.DbTx) (Grouping, error) {
	var obj Grouping
	err := q.Query.SelectOne(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj = GroupingObjs.toGrouping(columns, rb)
		return true
	})
	return obj, err
}

func (q _GroupingQuery) List(dbtx gmq.DbTx) ([]Grouping, error) {
	result := make([]Grouping, 0, 10)
	err := q.Query.SelectList(dbtx, func(columns []gmq.Column, rb []sql.RawBytes) bool {
		obj := GroupingObjs.toGrouping(columns, rb)
		result = append(result, obj)
		return true
	})
	return result, err
}

// Start of the model facade Apis.

type _GroupingObjs struct {
	fcMap map[string]string
}

func (o _GroupingObjs) Names() (schema, tbl, alias string) {
	return "public", "grouping", "Grouping"
}

func (o _GroupingObjs) Select(fields ...string) _GroupingQuery {
	q := _GroupingQuery{}
	if len(fields) == 0 {
		fields = []string{"Id", "Name"}
	}
	q.Query = gmq.Select(o, o.columns(fields...))
	return q
}

func (o _GroupingObjs) Insert(obj Grouping) _GroupingQuery {
	q := _GroupingQuery{}
	q.Query = gmq.Insert(o, o.columnsWithData(obj, "Name"))
	return q
}

func (o _GroupingObjs) Update(obj Grouping, fields ...string) _GroupingQuery {
	q := _GroupingQuery{}
	q.Query = gmq.Update(o, o.columnsWithData(obj, fields...))
	return q
}

func (o _GroupingObjs) Delete() _GroupingQuery {
	q := _GroupingQuery{}
	q.Query = gmq.Delete(o)
	return q
}

///// Managed Objects Filters definition

func (o _GroupingObjs) FilterId(op string, p int64, ps ...int64) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("id", op, params...)
}

func (o _GroupingObjs) FilterName(op string, p string, ps ...string) gmq.Filter {
	params := make([]interface{}, 1+len(ps))
	params[0] = p
	for i := range ps {
		params[i+1] = ps[i]
	}
	return o.newFilter("name", op, params...)
}

///// Managed Objects Columns definition

func (o _GroupingObjs) ColumnId(p ...int64) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"id", value}
}

func (o _GroupingObjs) ColumnName(p ...string) gmq.Column {
	var value interface{}
	if len(p) > 0 {
		value = p[0]
	}
	return gmq.Column{"name", value}
}

////// Internal helper funcs

func (o _GroupingObjs) newFilter(name, op string, params ...interface{}) gmq.Filter {
	if strings.ToUpper(op) == "IN" {
		return gmq.InFilter(name, params)
	}
	return gmq.UnitFilter(name, op, params[0])
}

func (o _GroupingObjs) toGrouping(columns []gmq.Column, rb []sql.RawBytes) Grouping {
	obj := Grouping{}
	if len(columns) == len(rb) {
		for i := range columns {
			switch columns[i].Name {
			case "id":
				obj.Id = gmq.AsInt64(rb[i])
			case "name":
				obj.Name = gmq.AsString(rb[i])
			}
		}
	}
	return obj
}

func (o _GroupingObjs) columns(fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId())
		case "Name":
			data = append(data, o.ColumnName())
		}
	}
	return data
}

func (o _GroupingObjs) columnsWithData(obj Grouping, fields ...string) []gmq.Column {
	data := make([]gmq.Column, 0, len(fields))
	for _, f := range fields {
		switch f {
		case "Id":
			data = append(data, o.ColumnId(obj.Id))
		case "Name":
			data = append(data, o.ColumnName(obj.Name))
		}
	}
	return data
}

var GroupingObjs _GroupingObjs

func init() {
	GroupingObjs.fcMap = map[string]string{
		"Id":   "id",
		"Name": "name",
	}
	gob.Register(Grouping{})
}
